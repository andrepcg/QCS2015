#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('WebApp:server');
var http = require('http');


var wsdl_sources = ['http://localhost:8081/insulin/?wsdl'];
var soap = require("../soap");
var NVoter = new soap(wsdl_sources);


setTimeout(function(){

  NVoter.getBackgroundInsulinDose(79, function(r){
    console.log("Backgournd insulin dose(79): " + r.result + " (expected: 22)");
  });

  NVoter.getMealtimeInsulinDose(60, 12, 200, 100, 25, function(r){
    console.log("MealtimeInsulinDose(60, 12, 200, 100, 25): " + r.result + " (expected: 14)");
  });

  NVoter.getMealtimeInsulinDose(95, 10, 100, 120, 50 , function(r){
    console.log("MealtimeInsulinDose(95, 10, 100, 120, 50): " + r.result + " (expected: 0)");
  });

  NVoter.getMealtimeInsulinDose(120, 14, 170, 100, 60, function(r){
    console.log("MealtimeInsulinDose(120, 14, 170, 100, 60): " + r.result + " (expected: 8)");
  });

  NVoter.getPersonalSensitivityToInsulin(5, [0, 10], [50, 50], function(r){
    console.log("personalSensitivityToInsulin(5, {0, 10}, {50, 50}): " + r.result + " (expected: 50)");
  });

  NVoter.getPersonalSensitivityToInsulin(6, [2, 8], [32, 83], function(r){
    console.log("personalSensitivityToInsulin(6, {2, 8}, {32, 83}): " + r.result + " (expected: 66)");
  });

  NVoter.getPersonalSensitivityToInsulin(0, [1, 3, 10], [33, 43, 70], function(r){
    console.log("personalSensitivityToInsulin(0, {1, 3, 10}, {33, 43, 70}): " + r.result + " (expected: 30)");
  });

  NVoter.getPersonalSensitivityToInsulin(4, [1, 6, 8, 9], [32, 61, 91, 88] , function(r){
    console.log("personalSensitivityToInsulin(4, {1, 6, 8, 9}, {32, 61, 91, 88} ): " + r.result + " (expected: 53)");
  });


}, 500);


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
